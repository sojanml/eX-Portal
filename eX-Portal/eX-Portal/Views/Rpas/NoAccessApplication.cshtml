@model eX_Portal.ViewModel.FlightSetupViewModel
@using eX_Portal.exLogic;
@{
    ViewBag.Title = "No access  Already  "+ Model.GcaApproval.ApprovalStatus + "!";
}




<h2>Requested By</h2>
@Html.Action("UserDetailView", "User", new { ID = Model.GcaApproval.PilotUserId })

<h2>UAS Details</h2>
@Html.Action("DroneDetail", "Drone", new { ID = Model.GcaApproval.DroneID })


<h2>Application</h2>
<table class="qDetailView">
    <tr>
        <td>@Html.DisplayNameFor(model => model.GcaApproval.ApprovalName): <span class="value">@Html.DisplayFor(model => model.GcaApproval.ApprovalName)</span></td>
        <td>Start Date: <span class="value">@Html.DisplayFor(model => model.GcaApproval.StartDate, "ShortDateTime")</span></td>
        <td>Start Time: <span class="value">@Html.DisplayFor(model => model.GcaApproval.StartTime)</span></td>
    </tr>
    <tr>
        <td>Flight Type : <span class="value">@Html.DisplayFor(model => model.FlightType)</span></td>
        <td>End Date: <span class="value">@Html.DisplayFor(model => model.GcaApproval.EndDate, "ShortDateTime")</span></td>
        <td>End Time: <span class="value">@Html.DisplayFor(model => model.GcaApproval.EndTime)</span></td>
    </tr>
    <tr>
        <td>Client Name : <span class="value">@Html.DisplayFor(model => model.GcaApproval.ClientName)</span></td>
        <td>Minimum Altitude    : <span class="value">@Html.DisplayFor(model => model.GcaApproval.MinAltitude, "ShortDateTime")</span></td>
        <td>Maximum Altitude    : <span class="value">@Html.DisplayFor(model => model.GcaApproval.MaxAltitude)</span></td>
    </tr>
    <tr>
        <td >Notification Emails : <span class="value">@Html.DisplayFor(model => model.GcaApproval.NotificationEmails)</span></td>
        <td colspan="3">Status : <span class="value">@Html.DisplayFor(model => model.GcaApproval.ApprovalStatus)</span></td>
    </tr>
</table>
<div id="map_canvas" style="width: 100%; height: 450px"></div>

<br />


@Scripts.Render("~/bundles/jqueryval")
@section scripts {
    <script type="text/javascript" src="//maps.google.com/maps/api/js?key=AIzaSyDY6IHXH4-fUAzYq6HBR_ndu_lnyyopcTs&sensor=false"></script>
        <script src="~/Scripts/ADSB-Map.js"></script>
    <script type="text/javascript">
        var map = null;
        var OuterBorder = null;
        var OuterPoly = null;
                var MapBounds = new google.maps.LatLngBounds();
                $(document).ready(function () {
                    initialize();
                });

                function initialize() {
                    // map = new google.maps.Map(document.getElementById('map_canvas'), mapOptions)
                    var myLatLng = { lat: 25, lng: 55 };

                    var mapDiv = document.getElementById('map_canvas');
                    map = new google.maps.Map(mapDiv, {
                        center: myLatLng,
                        zoom: 10,
                        styles: getADSBMapStyle()
                    });


                    var BoxCord = setBoundary(getCoordinates());
                    // Construct the polygon.
                    BoundaryBox = new google.maps.Polygon({
                        paths: BoxCord,
                        strokeColor: '#FF0000',
                        strokeOpacity: 0.7,
                        strokeWeight: 1,
                        fillColor: '#00FF00',
                        fillOpacity: 0.1,
                        editable: false,
                        draggable: false
                    });
                    OuterBorder = new google.maps.Polyline({
                        path: [],
                        strokeColor: 'red',
                        strokeOpacity: 1,
                        strokeWeight: 4,
                        map: map
                    });
                    OuterPoly = new google.maps.Polygon({
                        paths: [],
                        strokeWeight: 0,
                        fillColor: '#f2a003',
                        fillOpacity: 0.4,
                        map: map
                    });
                    BoundaryBox.setMap(map);
                    LoadOutPoly("@Model.GcaApproval.Coordinates","@Model.GcaApproval.InnerBoundaryCoord");
                    map.fitBounds(MapBounds);
                };



                function setBoundary(Cordinates) {
                    var Bounds = [];
                    var LatLng = Cordinates.split(',');
                    for (var i = 0; i < LatLng.length; i++) {
                        var Bound = LatLng[i].split(" ");
                        var Point = new google.maps.LatLng(parseFloat(Bound[0]), parseFloat(Bound[1]));
                        //{ lat: parseFloat(Bound[0]), lng: parseFloat(Bound[1]) };
                        MapBounds.extend(Point);
                        Bounds.push(Point);
                    }
                    return Bounds;
                }

                function getCoordinates() {
                    var Cordinates = "@Model.GcaApproval.Coordinates";
                    return Cordinates;
                }
        function ToPath(Coordinates) {
            var Path = [];
            if (Coordinates == '' || Coordinates == 'null') return Path;
            var aLatLng = Coordinates.split(',');
            for (var i = 0; i < aLatLng.length; i++) {
                var Points = aLatLng[i].split(' ');
                Path.push({ lat: parseFloat(Points[0]), lng: parseFloat(Points[1]) });
            }
            return Path;
        }

        function LoadOutPoly(inner, outer) {
            var InnerPolyPath = ToPath(inner);
            var OuterPath = ToPath(outer);
            if (InnerPolyPath.length < 1) return;
            if (OuterPath.length < 1) return;

            //Generate Holo Poly
            var HoloPath = InnerPolyPath;
            //Close the polygon
            HoloPath.push(InnerPolyPath[0]);
            HoloPath = HoloPath.concat(OuterPath.reverse());
            OuterPoly.setPath(HoloPath);
            OuterBorder.setPath(OuterPath);


        }

    </script>
}

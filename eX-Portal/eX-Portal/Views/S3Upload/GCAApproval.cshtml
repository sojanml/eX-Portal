@model eX_Portal.Models.GCA_Approval
@using eX_Portal.exLogic
@{ 
  ViewBag.Title = "DGCAA Approval";
}

<form id="formS3" name="formS3" action="@ViewBag.FormAction" method="@ViewBag.FormMethod" enctype="@ViewBag.FormEnclosureType">
    <section class="general-form" id="loginForm">
        <input type="hidden" name="key" value="@ViewBag.FileId" />
        <input type="hidden" name="AWSAccessKeyId" value="@ViewBag.AWSAccessKey" />
        <input type="hidden" name="acl" value="@ViewBag.Acl" />
        <input type="hidden" name="policy" value="@ViewBag.Base64EncodedPolicy" />
        <input type="hidden" name="signature" value="@ViewBag.Signature" />
        <input type="hidden" name="redirect" value="@ViewBag.RedirectUrl" />

        <div class="editor-label">
            Select the Drone for Uploading the document
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.DroneID, Util.GetDropDowntList("Drone"))
            <span style="display:none;" id="DroneID-Required" class="field-validation-error">Please select a drone to contine...</span>
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.ApprovalName)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.ApprovalName)
            @Html.ValidationMessageFor(model => model.ApprovalName)
        </div>
        <div class="editor-label">
            <input class="button" style="float:right; margin-bottom:5px;" type="button" id="btnCoordinates" name="btnCoordinates" value="Show Map" />
            @Html.LabelFor(model => model.Coordinates, "Coordinates")          
        </div>

        <div class="editor-field">
            @Html.EditorFor(model => model.Coordinates)
            @Html.ValidationMessageFor(model => model.Coordinates)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.ApprovalDate)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.ApprovalDate, new { @class = "date-picker" })
            @Html.ValidationMessageFor(model => model.ApprovalDate)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.StartDate)
        </div>
        <div class="editor-field">
            
            @Html.TextBoxFor(model => model.StartDate, new { @class = "date-picker" })
          @Html.ValidationMessageFor(model => model.StartDate)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.EndDate)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.EndDate, new { @class = "date-picker" })
          @Html.ValidationMessageFor(model => model.EndDate)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.StartTime)
          @Html.ValidationMessageFor(model => model.StartTime)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.StartTime)
            @Html.ValidationMessageFor(model => model.StartTime)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.EndTime)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.EndTime)
            @Html.ValidationMessageFor(model => model.EndTime)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.MinAltitude,"Minimum Altitude")
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.MinAltitude)
            @Html.ValidationMessageFor(model => model.MinAltitude)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.MaxAltitude, "Maximum Altitude")
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.MaxAltitude)
            @Html.ValidationMessageFor(model => model.MaxAltitude)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.BoundaryInMeters, "Boundary(in meters)")
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.BoundaryInMeters)
            @Html.ValidationMessageFor(model => model.BoundaryInMeters)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.ApprovalFileUrl, "Upload Document")
        </div>
        <div class="editor-field" id="file-input">
            <input name="file" type="file" />
            <span style="display:none;" id="file-Required" class="field-validation-error">Please select a file to upload...</span>
        </div>
        <div class="editor-field" id="file-info">
            <span id="file-info-name"></span><span id="file-info-status"></span>
        </div>

        <div class="form-toolbar">
            <input type="submit" id="btn-submit" value="Save" />
        </div>
    </section>
</form>


<div id="map-dialog" style="display:none;" title="Select Cordinates for the Approval">
  <iframe id="iFrameMap" name="iFrameMap" src="/Map/Select" style="width:100%; height:100%; border:0px"></iframe>
  
</div>


@section header{
    <link href="~/Content/black-box.css" rel="stylesheet" />
  <script type="text/javascript">
    function getCoordinates() {
      return $('#Coordinates').val();
    }
    function setCoordinates(Cord) {
      $('#Coordinates').val(Cord);
    }

  </script>
}
@section Scripts{
<script type="text/javascript">
    var UploadUrl = '/S3Upload/UploadGCA';
    var DocType ='Approval';
    $(document).ready(function () {
      // Create a map object and specify the DOM element for display.
      var map = null;
      $('#btnCoordinates').on("click", function () {
        var iFrame = window.frames['iFrameMap']
        if (iFrame.updateCordinates) iFrame.updateCordinates();
        $("#map-dialog").dialog({
          resizable: false,
          height: 600,
          minWidth: 1000,
          modal: true,
          buttons: {
            Close: function () {
              $(this).dialog("close");
            }
          }
        });
      })
    });



    </script>
    <script type="text/javascript" src="~/Scripts/S3Upload.js"></script>
}
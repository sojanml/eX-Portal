@model eX_Portal.Models.BlackBoxTransaction
@using eX_Portal.exLogic
@{
  ViewBag.Title = "Receive Black Box";
  Layout = "~/Views/Shared/_eXPortal.cshtml";
}
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "RecBlackBox", name = "RecBlackBox" })) {
  <section class="general-form" id="loginForm">

    <input type="hidden" name="DroneID" value="@Model.DroneID" />
    <input type="hidden" name="CreatedBy" value="@Model.CreatedBy" />
    <input type="hidden" name="ApprovalID" value="@Model.ApprovalID" />

    <input type="hidden" name="hdnTotalAmount" value="@Model.TotalAmount" />
    <input type="hidden" name="hdnRentStartDate" value="@Model.RentStartDate" />


    <div class="editor-label">
      Select the Black box
    </div>
    <div class="editor-field">
      @Html.DropDownListFor(model => model.BlackBoxID, Util.GetBlackBox(), "Please Select...")
      @Html.ValidationMessageFor(model => model.BlackBoxID)
    </div>
    <div class="editor-label">
      @Html.LabelFor(model => model.BBStatus)
    </div>
    <div class="editor-field">
      <div class="input-field">@Model.BBStatus</div>
      @Html.ValidationMessageFor(model => model.BBStatus)
    </div>
    <div class="editor-label">
      @Html.LabelFor(model => model.Note, "Note")
    </div>
    <div class="editor-field">
      @Html.EditorFor(model => model.Note)
      @Html.ValidationMessageFor(model => model.Note)
    </div>

    <div class="two-column-form-group">
      <div class="form-group">
        <div class="editor-label">
          @Html.LabelFor(model => model.RentStartDate)
        </div>
        <div class="editor-field">
          <div id="RentStartDate" class="input-field date-picker">@Model.RentStartDate&nbsp;</div>
        </div>
      </div>
      <div class="form-group">
        <div class="editor-label">
          @Html.LabelFor(model => model.RentEndDate)
        </div>
        <div class="editor-field">
          @Html.TextBoxFor(model => model.RentEndDate, new { @class = "date-picker" })
          @Html.ValidationMessageFor(model => model.RentEndDate)
        </div>
      </div>
    </div>

    <h2>Rent Calculation</h2>
    <div id="msg" style="font-size:small">Please select blackbox and rent end date to view rent calculations...</div>
    <div id="RentCalculation">Please select a blackbox from list for calculation...</div>

    <div class="two-column-form-group">
      <h2>Receive Black Box</h2>
      <div class="form-group">
        <div>
          <div class="editor-label">
            Rental Amount (In AED)
          </div>
          <div class="editor-field">
            @Html.EditorFor(model => model.Amount, new { disabled = "disabled" })
            @ViewData["RAmount"]
          </div>
        </div>
      </div>
      <div class="form-group">
        <div>
          <div class="editor-label">
            Total Amount Paid (In AED)s
          </div>
          <div class="editor-field">
            @Html.EditorFor(model => model.TotalAmount)
            @Html.ValidationMessageFor(model => model.TotalAmount)
          </div>
        </div>
      </div>

    </div>
    <div class="form-group">
      <div class="editor-label">
        Balance Amount (In AED)
      </div>
      <div class="editor-field">
        @Html.EditorFor(model => model.NameOnCard, new { disabled = "disabled" })
      </div>
    </div>
    <div class="form-toolbar">
      <input type="submit" id="btn-submit" value="Save" />
    </div>
  </section>
}
@section scripts {
  @Scripts.Render("~/bundles/jqueryval")
  <script type="text/javascript">
    var FORM = document.forms['RecBlackBox'];
    var RentStartDate = null;
    var RentEndDate = null;
    var RentAmount = null;
    var PaidAmount = null;
    var BalanceAmount = null;

    $(document).ready(function () {

        var e = document.getElementById("BlackBoxID");
        var bxID = e.options[e.selectedIndex].value;

        $('#BlackBoxID').on("change", function () {
            var URL_t = '@Url.Action("BlackBoxTransAmountPaidVal")' + "/" + $(this).val();
            $.ajax({
                method: 'GET',
                url: URL_t
            }).done(ShowAmount);

            var URL_t = '@Url.Action("BlackBoxTransDroneVal")' + "/" + $(this).val();
            $.ajax({
                method: 'GET',
                url: URL_t
            }).done(ShowDroneID);

            var URL = '@Url.Action("BlackBoxInfo")' + "/" + $(this).val();
            $('#RecBlackBox :input').prop("disabled", true);
            $('#RentCalculation').slideUp();
            $.ajax({
                method: 'GET',
                url: URL
            }).done(ShowRentCalcualtion);
      })//$('#TotalAmount').on("change")

      $('#RentEndDate').on("change", function () {
        RentEndDate = new Date($(this).val());
        var Days = Math.abs(RentEndDate - RentStartDate);
        var BBID = $('#BlackBoxID').val();
        var URL = '@Url.Action("BlackBoxInfo")' + "/" + BBID +
          '?StartDate=' + fmtDt(RentStartDate) +
          '&EndDate=' + fmtDt(RentEndDate);
        $('#RentCalculation').slideUp();
        $.ajax({
          method: 'GET',
          url: URL
        }).done(function (data) {
          $('#RentCalculation')
            .html(getCostDetail(data.Cost))
            .slideDown();
        });

      });//$('#RentEndDate').on("change")

      $('#TotalAmount').on("change", GetfinalAmount);
      
      $('#Amount').on("change", GetfinalAmount);

    });//$(document).ready(function ()
      function ShowAmount(data) {
          FORM['Amount'].value = data;
          RentAmount = data;
    }
    function ShowDroneID(data) {
        FORM['DroneID'].value = data;
      }

    function ShowRentCalcualtion(data) {
      $('#RecBlackBox :input').prop("disabled", false);
      RentStartDate = toDate(data.Info.RentStartDate);
      RentEndDate = toDate(data.Info.RentEndDate);
      $('#RentStartDate').html(fmtDt(RentStartDate) == null ? toDate() : fmtDt(RentStartDate));
      FORM['RentEndDate'].value = fmtDt(RentEndDate) == null ? toDate() : fmtDt(RentEndDate);
      FORM['hdnRentStartDate'].value = fmtDt(RentStartDate) == null ? toDate() : fmtDt(RentStartDate);
      $('#RentCalculation')
        .html(getCostDetail(data.Cost))
        .slideDown();
    }
    function GetfinalAmount(A,B)
    {
      var Total = $('#TotalAmount').val();
      var Rental = $('#Amount').val();
      var nTotal = parseFloat(Total.replace(/\,/, ''));
      var nRental = parseFloat(Rental.replace(/\,/, ''));
      if (isNaN(nTotal)) nTotal = 0;
      if (isNaN(nRental)) nRental = 0;
      BalanceAmount = nTotal - nRental;

      FORM['NameOnCard'].value = fmtMoney(BalanceAmount);
      FORM['Amount'].value = fmtMoney(nRental);
      FORM['TotalAmount'].value = fmtMoney(nTotal);
    }

    function getCostDetail(Cost) {
      if (!Cost || Cost.length < 1) return;


      var HTML = '<table class="report" cellspacing="0">' +
      '<thead>\n' +
      '<tr>\n' +
      '<th>#</th>\n' +
      '<th>&nbsp;</th>\n' +
      '<th>Rent Type</th>\n' +
      '<th align="right">Qty</th>\n' +
      '<th align="right">Amount (AED)</th>\n' +
      '<th align="right">Total (AED)</th>\n' +
      '<th>&nbsp;</th>\n' +
      '</tr>\n' +
      '</thead>\n';

      for (var i = 0; i < Cost.length; i++) {
          if (Cost[i].isSelected) {
              var amt = fmtMoney(Cost[i].CalcuatedCost);
              PaidAmount = Cost[i].CalcuatedCost;
              FORM['TotalAmount'].value = amt;
              FORM["hdnTotalAmount"].value = amt;
          }


        HTML +=
        '<tr class="' + (Cost[i].isSelected ? "selected" : "") + '">\n' +
        '<td>' +  (i+1) + '</td>\n' +
        '<td>' + (Cost[i].isSelected ? '<span class="icon" style="color:green">&#xf00c;</span>' : '&nbsp;') + '</td>\n' +
        '<td>' + Cost[i].RentType + '</td>\n' +
        '<td align="right">' + Cost[i].SectionDays + '</td>\n' +
        '<td align="right">' + fmtMoney(Cost[i].RentAmount) + '</td>\n' +
        '<td align="right">' + fmtMoney(Cost[i].CalcuatedCost) + '</td>\n' +
        '<td>&nbsp;</td>\n' +
        '</tr>\n';
      }
      HTML += '</table>\n';

      GetfinalAmount(PaidAmount, RentAmount);
      return HTML;
    }

    function toDate(value) {
      var d = /\/Date\((\d*)\)\//.exec(value);
      var theDate = (d) ? new Date(+d[1]) : value;
      return theDate;
    }

    function fmtDt(theDate) {
        if (theDate == null)
            return theDate;
      var Month = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
      var fmtDate =
        theDate.getDate() + '-' +
        Month[theDate.getMonth()] + '-' +
        theDate.getFullYear();
        return fmtDate;
        //return theDate;
    }

    function fmtMoney(theNumber){
      var n = theNumber;
          c = 2,
          d = ".",
          t = ",",
          s = n < 0 ? "-" : "",
          i = parseInt(n = Math.abs(+n || 0).toFixed(c)) + "",
          j = (j = i.length) > 3 ? j % 3 : 0;
      return s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
    };

  </script>
}